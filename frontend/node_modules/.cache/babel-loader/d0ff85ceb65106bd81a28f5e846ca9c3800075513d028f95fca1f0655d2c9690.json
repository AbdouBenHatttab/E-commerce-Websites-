{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport ContactService from '@/services/ContactService';\nexport default {\n  name: 'ContactMessages',\n  data() {\n    return {\n      messages: [],\n      editingMessage: null\n    };\n  },\n  computed: {\n    isAdmin() {\n      return this.$store.state.user?.role === 'ROLE_ADMIN'; // Check if the user is an admin\n    }\n  },\n  async created() {\n    try {\n      this.messages = await ContactService.getAllMessages();\n    } catch (error) {\n      console.error('Error fetching contact messages:', error);\n    }\n  },\n  methods: {\n    async deleteMessage(id) {\n      try {\n        await ContactService.deleteMessage(id);\n        this.messages = this.messages.filter(message => message.id !== id);\n      } catch (error) {\n        console.error('Error deleting message:', error);\n      }\n    },\n    editMessage(message) {\n      this.editingMessage = {\n        ...message\n      }; // Create a copy of the message to edit\n    },\n    async saveMessage() {\n      try {\n        await ContactService.updateMessage(this.editingMessage.id, this.editingMessage);\n        const index = this.messages.findIndex(msg => msg.id === this.editingMessage.id);\n        if (index !== -1) {\n          this.messages[index] = this.editingMessage;\n        }\n        this.editingMessage = null;\n      } catch (error) {\n        console.error('Error updating message:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ContactService","name","data","messages","editingMessage","computed","isAdmin","$store","state","user","role","created","getAllMessages","error","console","methods","deleteMessage","id","filter","message","editMessage","saveMessage","updateMessage","index","findIndex","msg"],"sources":["C:\\Users\\Hedib\\OneDrive\\Bureau\\hello-word-vue\\src\\components\\admin\\ContactMessages.vue"],"sourcesContent":["<template>\n  <div class=\"contact-messages-container\">\n    <h2 class=\"text-center mb-4\">Contact Us Messages</h2>\n    <div v-if=\"messages.length === 0\" class=\"alert alert-info\">\n      No messages available.\n    </div>\n\n    <!-- Messages List -->\n    <div v-else>\n      <div v-for=\"message in messages\" :key=\"message.id\" class=\"card mb-3\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">{{ message.name }}</h5>\n          <h6 class=\"card-subtitle mb-2 text-muted\">{{ message.email }}</h6>\n          <p class=\"card-text\">{{ message.message }}</p>\n\n          <!-- Edit and Delete Buttons for Admin -->\n          <button\n            v-if=\"isAdmin\"\n            @click=\"editMessage(message)\"\n            class=\"btn btn-warning btn-sm me-2\"\n          >\n            Edit\n          </button>\n          <button\n            v-if=\"isAdmin\"\n            @click=\"deleteMessage(message.id)\"\n            class=\"btn btn-danger btn-sm\"\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <!-- Edit Message Modal -->\n    <div\n      v-if=\"editingMessage\"\n      class=\"modal fade show\"\n      tabindex=\"-1\"\n      aria-labelledby=\"editModalLabel\"\n      style=\"display: block\"\n    >\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"editModalLabel\">Edit Message</h5>\n            <button\n              type=\"button\"\n              class=\"btn-close\"\n              data-bs-dismiss=\"modal\"\n              aria-label=\"Close\"\n              @click=\"editingMessage = null\"\n            ></button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"form-floating mb-4\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                id=\"name\"\n                v-model=\"editingMessage.name\"\n              />\n              <label for=\"name\">Name</label>\n            </div>\n            <div class=\"form-floating mb-4\">\n              <input\n                type=\"email\"\n                class=\"form-control\"\n                id=\"email\"\n                v-model=\"editingMessage.email\"\n              />\n              <label for=\"email\">Email</label>\n            </div>\n            <div class=\"form-floating mb-4\">\n              <textarea\n                class=\"form-control\"\n                id=\"message\"\n                v-model=\"editingMessage.message\"\n                rows=\"3\"\n              ></textarea>\n              <label for=\"message\">Message</label>\n            </div>\n          </div>\n          <div class=\"modal-footer\">\n            <button\n              type=\"button\"\n              class=\"btn btn-secondary\"\n              @click=\"editingMessage = null\"\n            >\n              Close\n            </button>\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"saveMessage\">\n              Save changes\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ContactService from '@/services/ContactService';\n\nexport default {\n  name: 'ContactMessages',\n  data() {\n    return {\n      messages: [],\n      editingMessage: null,\n    };\n  },\n  computed: {\n    isAdmin() {\n      return this.$store.state.user?.role === 'ROLE_ADMIN'; // Check if the user is an admin\n    },\n  },\n  async created() {\n    try {\n      this.messages = await ContactService.getAllMessages();\n    } catch (error) {\n      console.error('Error fetching contact messages:', error);\n    }\n  },\n  methods: {\n    async deleteMessage(id) {\n      try {\n        await ContactService.deleteMessage(id);\n        this.messages = this.messages.filter((message) => message.id !== id);\n      } catch (error) {\n        console.error('Error deleting message:', error);\n      }\n    },\n    editMessage(message) {\n      this.editingMessage = { ...message }; // Create a copy of the message to edit\n    },\n    async saveMessage() {\n      try {\n        await ContactService.updateMessage(\n          this.editingMessage.id,\n          this.editingMessage\n        );\n        const index = this.messages.findIndex(\n          (msg) => msg.id === this.editingMessage.id\n        );\n        if (index !== -1) {\n          this.messages[index] = this.editingMessage;\n        }\n        this.editingMessage = null;\n      } catch (error) {\n        console.error('Error updating message:', error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Add styles for the CRUD operations */\n</style>\n"],"mappings":";;AAsGA,OAAOA,cAAa,MAAO,2BAA2B;AAEtD,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,IAAI,EAAEC,IAAG,KAAM,YAAY,EAAE;IACxD;EACF,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI;MACF,IAAI,CAACR,QAAO,GAAI,MAAMH,cAAc,CAACY,cAAc,CAAC,CAAC;IACvD,EAAE,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EACDE,OAAO,EAAE;IACP,MAAMC,aAAaA,CAACC,EAAE,EAAE;MACtB,IAAI;QACF,MAAMjB,cAAc,CAACgB,aAAa,CAACC,EAAE,CAAC;QACtC,IAAI,CAACd,QAAO,GAAI,IAAI,CAACA,QAAQ,CAACe,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACF,EAAC,KAAMA,EAAE,CAAC;MACtE,EAAE,OAAOJ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IACDO,WAAWA,CAACD,OAAO,EAAE;MACnB,IAAI,CAACf,cAAa,GAAI;QAAE,GAAGe;MAAQ,CAAC,EAAE;IACxC,CAAC;IACD,MAAME,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMrB,cAAc,CAACsB,aAAa,CAChC,IAAI,CAAClB,cAAc,CAACa,EAAE,EACtB,IAAI,CAACb,cACP,CAAC;QACD,MAAMmB,KAAI,GAAI,IAAI,CAACpB,QAAQ,CAACqB,SAAS,CAClCC,GAAG,IAAKA,GAAG,CAACR,EAAC,KAAM,IAAI,CAACb,cAAc,CAACa,EAC1C,CAAC;QACD,IAAIM,KAAI,KAAM,CAAC,CAAC,EAAE;UAChB,IAAI,CAACpB,QAAQ,CAACoB,KAAK,IAAI,IAAI,CAACnB,cAAc;QAC5C;QACA,IAAI,CAACA,cAAa,GAAI,IAAI;MAC5B,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}