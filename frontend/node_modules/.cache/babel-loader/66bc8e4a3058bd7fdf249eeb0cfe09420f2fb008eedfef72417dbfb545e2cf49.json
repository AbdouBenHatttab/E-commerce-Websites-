{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nconst API_URL = 'http://localhost:8080/auth';\nclass AuthService {\n  // Login user\n  async login(credentials) {\n    const response = await axios.post(`${API_URL}/login`, credentials, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const user = response.data.user;\n    const token = response.data.token;\n\n    // Store user and token in localStorage\n    localStorage.setItem('user', JSON.stringify(user));\n    localStorage.setItem('token', token);\n    return response.data;\n  }\n\n  // Register user\n  async register(userData) {\n    return axios.post(`${API_URL}/register`, userData, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  // Logout user\n  logout() {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  }\n\n  // Get the current user\n  getUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  // Get the stored token\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  // Check if token is expired\n  isTokenExpired(token) {\n    const decoded = jwt_decode(token);\n    const now = Date.now() / 1000;\n    return decoded.exp < now;\n  }\n\n  // Get token, checking for expiration\n  getValidToken() {\n    const token = this.getToken();\n    if (token && this.isTokenExpired(token)) {\n      console.error('Token has expired');\n      this.logout();\n      return null;\n    }\n    return token;\n  }\n\n  // Get the current user from localStorage\n  getCurrentUser() {\n    return this.getUser();\n  }\n\n  // Store user info in localStorage\n  setUser(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","jwt_decode","API_URL","AuthService","login","credentials","response","post","headers","user","data","token","localStorage","setItem","JSON","stringify","register","userData","logout","removeItem","getUser","parse","getItem","getToken","isTokenExpired","decoded","now","Date","exp","getValidToken","console","error","getCurrentUser","setUser"],"sources":["C:/Users/Hedib/OneDrive/Bureau/hello-word-vue/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nconst API_URL = 'http://localhost:8080/auth';\n\nclass AuthService {\n  // Login user\n  async login(credentials) {\n    const response = await axios.post(`${API_URL}/login`, credentials, {\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const user = response.data.user;\n    const token = response.data.token;\n\n    // Store user and token in localStorage\n    localStorage.setItem('user', JSON.stringify(user));\n    localStorage.setItem('token', token);\n\n    return response.data;\n  }\n\n  // Register user\n  async register(userData) {\n    return axios.post(`${API_URL}/register`, userData, {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  // Logout user\n  logout() {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  }\n\n  // Get the current user\n  getUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  // Get the stored token\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  // Check if token is expired\n  isTokenExpired(token) {\n    const decoded = jwt_decode(token);\n    const now = Date.now() / 1000;\n    return decoded.exp < now;\n  }\n\n  // Get token, checking for expiration\n  getValidToken() {\n    const token = this.getToken();\n    if (token && this.isTokenExpired(token)) {\n      console.error('Token has expired');\n      this.logout();\n      return null;\n    }\n    return token;\n  }\n\n  // Get the current user from localStorage\n  getCurrentUser() {\n    return this.getUser();\n  }\n\n  // Store user info in localStorage\n  setUser(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,YAAY;AAEnC,MAAMC,OAAO,GAAG,4BAA4B;AAE5C,MAAMC,WAAW,CAAC;EAChB;EACA,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAGL,OAAO,QAAQ,EAAEG,WAAW,EAAE;MACjEG,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAGH,QAAQ,CAACI,IAAI,CAACD,IAAI;IAC/B,MAAME,KAAK,GAAGL,QAAQ,CAACI,IAAI,CAACC,KAAK;;IAEjC;IACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;IAClDG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;IAEpC,OAAOL,QAAQ,CAACI,IAAI;EACtB;;EAEA;EACA,MAAMM,QAAQA,CAACC,QAAQ,EAAE;IACvB,OAAOjB,KAAK,CAACO,IAAI,CAAC,GAAGL,OAAO,WAAW,EAAEe,QAAQ,EAAE;MACjDT,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;EACJ;;EAEA;EACAU,MAAMA,CAAA,EAAG;IACPN,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;IAC/BP,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;EAClC;;EAEA;EACAC,OAAOA,CAAA,EAAG;IACR,OAAON,IAAI,CAACO,KAAK,CAACT,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD;;EAEA;EACAC,QAAQA,CAAA,EAAG;IACT,OAAOX,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;EACtC;;EAEA;EACAE,cAAcA,CAACb,KAAK,EAAE;IACpB,MAAMc,OAAO,GAAGxB,UAAU,CAACU,KAAK,CAAC;IACjC,MAAMe,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC,GAAG,IAAI;IAC7B,OAAOD,OAAO,CAACG,GAAG,GAAGF,GAAG;EAC1B;;EAEA;EACAG,aAAaA,CAAA,EAAG;IACd,MAAMlB,KAAK,GAAG,IAAI,CAACY,QAAQ,CAAC,CAAC;IAC7B,IAAIZ,KAAK,IAAI,IAAI,CAACa,cAAc,CAACb,KAAK,CAAC,EAAE;MACvCmB,OAAO,CAACC,KAAK,CAAC,mBAAmB,CAAC;MAClC,IAAI,CAACb,MAAM,CAAC,CAAC;MACb,OAAO,IAAI;IACb;IACA,OAAOP,KAAK;EACd;;EAEA;EACAqB,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAACZ,OAAO,CAAC,CAAC;EACvB;;EAEA;EACAa,OAAOA,CAACxB,IAAI,EAAE;IACZG,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;EACpD;AACF;AAEA,eAAe,IAAIN,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}