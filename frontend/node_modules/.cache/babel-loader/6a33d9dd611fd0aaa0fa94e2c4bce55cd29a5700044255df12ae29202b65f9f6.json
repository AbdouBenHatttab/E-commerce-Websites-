{"ast":null,"code":"// src/services/AuthService.js\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:8080/auth\";\nclass AuthService {\n  async login(credentials) {\n    // ðŸ§¹ Clear old Authorization header (to prevent sending wrong token)\n    delete axios.defaults.headers.common[\"Authorization\"];\n    const response = await axios.post(`${API_URL}/login`, credentials, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const user = response.data.user;\n    const token = response.data.token;\n\n    // âœ… Save token and user in localStorage\n    localStorage.setItem(\"user\", JSON.stringify(user));\n    localStorage.setItem(\"token\", token);\n\n    // âœ… Set token for future requests\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    return response.data;\n  }\n  async register(userData) {\n    return axios.post(`${API_URL}/register`, userData, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  }\n  logout() {\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n\n    // ðŸ§¹ Remove token from Axios headers\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n  getUser() {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  }\n  getToken() {\n    return localStorage.getItem(\"token\");\n  }\n  getCurrentUser() {\n    return this.getUser();\n  }\n  setUser(user) {\n    localStorage.setItem(\"user\", JSON.stringify(user));\n  }\n  setAuthHeaderFromLocalStorage() {\n    const token = this.getToken();\n    if (token) {\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    }\n  }\n}\n\n// When app starts, set token if exists\nconst authService = new AuthService();\nauthService.setAuthHeaderFromLocalStorage();\nexport default authService;","map":{"version":3,"names":["axios","API_URL","AuthService","login","credentials","defaults","headers","common","response","post","user","data","token","localStorage","setItem","JSON","stringify","register","userData","logout","removeItem","getUser","parse","getItem","getToken","getCurrentUser","setUser","setAuthHeaderFromLocalStorage","authService"],"sources":["C:/projet stage 2/final/hello-word-vue/src/services/AuthService.js"],"sourcesContent":["// src/services/AuthService.js\nimport axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080/auth\";\n\nclass AuthService {\n  async login(credentials) {\n    // ðŸ§¹ Clear old Authorization header (to prevent sending wrong token)\n    delete axios.defaults.headers.common[\"Authorization\"];\n\n    const response = await axios.post(`${API_URL}/login`, credentials, {\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n\n    const user = response.data.user;\n    const token = response.data.token;\n\n    // âœ… Save token and user in localStorage\n    localStorage.setItem(\"user\", JSON.stringify(user));\n    localStorage.setItem(\"token\", token);\n\n    // âœ… Set token for future requests\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n\n    return response.data;\n  }\n\n  async register(userData) {\n    return axios.post(`${API_URL}/register`, userData, {\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n\n  logout() {\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"token\");\n\n    // ðŸ§¹ Remove token from Axios headers\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n\n  getUser() {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  }\n\n  getToken() {\n    return localStorage.getItem(\"token\");\n  }\n\n  getCurrentUser() {\n    return this.getUser();\n  }\n\n  setUser(user) {\n    localStorage.setItem(\"user\", JSON.stringify(user));\n  }\n\n  setAuthHeaderFromLocalStorage() {\n    const token = this.getToken();\n    if (token) {\n      axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n    }\n  }\n}\n\n// When app starts, set token if exists\nconst authService = new AuthService();\nauthService.setAuthHeaderFromLocalStorage();\n\nexport default authService;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,4BAA4B;AAE5C,MAAMC,WAAW,CAAC;EAChB,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB;IACA,OAAOJ,KAAK,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IAErD,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGR,OAAO,QAAQ,EAAEG,WAAW,EAAE;MACjEE,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IAEF,MAAMI,IAAI,GAAGF,QAAQ,CAACG,IAAI,CAACD,IAAI;IAC/B,MAAME,KAAK,GAAGJ,QAAQ,CAACG,IAAI,CAACC,KAAK;;IAEjC;IACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;IAClDG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;;IAEpC;IACAZ,KAAK,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;IAElE,OAAOJ,QAAQ,CAACG,IAAI;EACtB;EAEA,MAAMM,QAAQA,CAACC,QAAQ,EAAE;IACvB,OAAOlB,KAAK,CAACS,IAAI,CAAC,GAAGR,OAAO,WAAW,EAAEiB,QAAQ,EAAE;MACjDZ,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;EACJ;EAEAa,MAAMA,CAAA,EAAG;IACPN,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;IAC/BP,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;;IAEhC;IACA,OAAOpB,KAAK,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;EACvD;EAEAc,OAAOA,CAAA,EAAG;IACR,OAAON,IAAI,CAACO,KAAK,CAACT,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC,CAAC;EACjD;EAEAC,QAAQA,CAAA,EAAG;IACT,OAAOX,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAE,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAACJ,OAAO,CAAC,CAAC;EACvB;EAEAK,OAAOA,CAAChB,IAAI,EAAE;IACZG,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;EACpD;EAEAiB,6BAA6BA,CAAA,EAAG;IAC9B,MAAMf,KAAK,GAAG,IAAI,CAACY,QAAQ,CAAC,CAAC;IAC7B,IAAIZ,KAAK,EAAE;MACTZ,KAAK,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;IACpE;EACF;AACF;;AAEA;AACA,MAAMgB,WAAW,GAAG,IAAI1B,WAAW,CAAC,CAAC;AACrC0B,WAAW,CAACD,6BAA6B,CAAC,CAAC;AAE3C,eAAeC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}