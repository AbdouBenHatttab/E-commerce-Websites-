{"ast":null,"code":"import ContactUsService from '@/services/ContactService';\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: {\n        name: '',\n        email: '',\n        message: ''\n      },\n      editMode: false,\n      messageToEdit: null\n    };\n  },\n  methods: {\n    // Fetch all messages\n    fetchMessages() {\n      ContactUsService.getAllMessages().then(() => {\n        this.messages = response.data; // Removed unused 'response' warning\n      }).catch(error => {\n        console.error('There was an error fetching the messages:', error);\n      });\n    },\n    // Create a new message\n    createMessage() {\n      ContactUsService.createMessage(this.newMessage).then(() => {\n        this.fetchMessages(); // Refresh the list\n        this.newMessage = {\n          name: '',\n          email: '',\n          message: ''\n        }; // Clear form\n      }).catch(error => {\n        console.error('There was an error creating the message:', error);\n      });\n    },\n    // Edit a message\n    editMessage(message) {\n      this.editMode = true;\n      this.messageToEdit = {\n        ...message\n      }; // Clone the message\n    },\n    // Update an existing message\n    updateMessage() {\n      ContactUsService.updateMessage(this.messageToEdit.id, this.messageToEdit).then(() => {\n        this.fetchMessages(); // Refresh the list\n        this.editMode = false;\n        this.messageToEdit = null;\n      }).catch(error => {\n        console.error('There was an error updating the message:', error);\n      });\n    },\n    // Delete a message\n    deleteMessage(id) {\n      ContactUsService.deleteMessage(id).then(() => {\n        this.fetchMessages(); // Refresh the list\n      }).catch(error => {\n        console.error('There was an error deleting the message:', error);\n      });\n    }\n  },\n  created() {\n    this.fetchMessages(); // Fetch the initial list of messages\n  }\n};","map":{"version":3,"names":["ContactUsService","data","messages","newMessage","name","email","message","editMode","messageToEdit","methods","fetchMessages","getAllMessages","then","response","catch","error","console","createMessage","editMessage","updateMessage","id","deleteMessage","created"],"sources":["C:\\Users\\Hedib\\OneDrive\\Bureau\\hello-word-vue\\src\\components\\admin\\ContactMessages.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Contact Us Messages</h2>\n\n    <!-- Add new message form -->\n    <div>\n      <h3>Create New Message</h3>\n      <form @submit.prevent=\"createMessage\">\n        <div>\n          <label for=\"name\">Name:</label>\n          <input type=\"text\" id=\"name\" v-model=\"newMessage.name\" required />\n        </div>\n        <div>\n          <label for=\"email\">Email:</label>\n          <input type=\"email\" id=\"email\" v-model=\"newMessage.email\" required />\n        </div>\n        <div>\n          <label for=\"message\">Message:</label>\n          <textarea\n            id=\"message\"\n            v-model=\"newMessage.message\"\n            required\n          ></textarea>\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n\n    <!-- Display messages -->\n    <div>\n      <h3>Messages List</h3>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Message</th>\n            <th>Timestamp</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"message in messages\" :key=\"message.id\">\n            <td>{{ message.name }}</td>\n            <td>{{ message.email }}</td>\n            <td>{{ message.message }}</td>\n            <td>{{ message.timestamp }}</td>\n            <td>\n              <button @click=\"editMessage(message)\">Edit</button>\n              <button @click=\"deleteMessage(message.id)\">Delete</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <!-- Edit message form (conditionally shown) -->\n    <div v-if=\"editMode\">\n      <h3>Edit Message</h3>\n      <form @submit.prevent=\"updateMessage\">\n        <div>\n          <label for=\"editName\">Name:</label>\n          <input\n            type=\"text\"\n            id=\"editName\"\n            v-model=\"messageToEdit.name\"\n            required\n          />\n        </div>\n        <div>\n          <label for=\"editEmail\">Email:</label>\n          <input\n            type=\"email\"\n            id=\"editEmail\"\n            v-model=\"messageToEdit.email\"\n            required\n          />\n        </div>\n        <div>\n          <label for=\"editMessage\">Message:</label>\n          <textarea\n            id=\"editMessage\"\n            v-model=\"messageToEdit.message\"\n            required\n          ></textarea>\n        </div>\n        <button type=\"submit\">Update</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ContactUsService from '@/services/ContactService';\n\nexport default {\n  data() {\n    return {\n      messages: [],\n      newMessage: {\n        name: '',\n        email: '',\n        message: '',\n      },\n      editMode: false,\n      messageToEdit: null,\n    };\n  },\n  methods: {\n    // Fetch all messages\n    fetchMessages() {\n      ContactUsService.getAllMessages()\n        .then(() => {\n          this.messages = response.data; // Removed unused 'response' warning\n        })\n        .catch((error) => {\n          console.error('There was an error fetching the messages:', error);\n        });\n    },\n\n    // Create a new message\n    createMessage() {\n      ContactUsService.createMessage(this.newMessage)\n        .then(() => {\n          this.fetchMessages(); // Refresh the list\n          this.newMessage = { name: '', email: '', message: '' }; // Clear form\n        })\n        .catch((error) => {\n          console.error('There was an error creating the message:', error);\n        });\n    },\n\n    // Edit a message\n    editMessage(message) {\n      this.editMode = true;\n      this.messageToEdit = { ...message }; // Clone the message\n    },\n\n    // Update an existing message\n    updateMessage() {\n      ContactUsService.updateMessage(this.messageToEdit.id, this.messageToEdit)\n        .then(() => {\n          this.fetchMessages(); // Refresh the list\n          this.editMode = false;\n          this.messageToEdit = null;\n        })\n        .catch((error) => {\n          console.error('There was an error updating the message:', error);\n        });\n    },\n\n    // Delete a message\n    deleteMessage(id) {\n      ContactUsService.deleteMessage(id)\n        .then(() => {\n          this.fetchMessages(); // Refresh the list\n        })\n        .catch((error) => {\n          console.error('There was an error deleting the message:', error);\n        });\n    },\n  },\n  created() {\n    this.fetchMessages(); // Fetch the initial list of messages\n  },\n};\n</script>\n\n<style scoped>\n/* Add some basic styling here */\ntable {\n  width: 100%;\n  border-collapse: collapse;\n}\n\ntable,\nth,\ntd {\n  border: 1px solid #ccc;\n}\n\nth,\ntd {\n  padding: 10px;\n  text-align: left;\n}\n\nbutton {\n  margin-right: 5px;\n}\n</style>\n"],"mappings":"AA6FA,OAAOA,gBAAe,MAAO,2BAA2B;AAExD,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE;QACVC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE;MACX,CAAC;MACDC,QAAQ,EAAE,KAAK;MACfC,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,aAAaA,CAAA,EAAG;MACdV,gBAAgB,CAACW,cAAc,CAAC,EAC7BC,IAAI,CAAC,MAAM;QACV,IAAI,CAACV,QAAO,GAAIW,QAAQ,CAACZ,IAAI,EAAE;MACjC,CAAC,EACAa,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACnE,CAAC,CAAC;IACN,CAAC;IAED;IACAE,aAAaA,CAAA,EAAG;MACdjB,gBAAgB,CAACiB,aAAa,CAAC,IAAI,CAACd,UAAU,EAC3CS,IAAI,CAAC,MAAM;QACV,IAAI,CAACF,aAAa,CAAC,CAAC,EAAE;QACtB,IAAI,CAACP,UAAS,GAAI;UAAEC,IAAI,EAAE,EAAE;UAAEC,KAAK,EAAE,EAAE;UAAEC,OAAO,EAAE;QAAG,CAAC,EAAE;MAC1D,CAAC,EACAQ,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAClE,CAAC,CAAC;IACN,CAAC;IAED;IACAG,WAAWA,CAACZ,OAAO,EAAE;MACnB,IAAI,CAACC,QAAO,GAAI,IAAI;MACpB,IAAI,CAACC,aAAY,GAAI;QAAE,GAAGF;MAAQ,CAAC,EAAE;IACvC,CAAC;IAED;IACAa,aAAaA,CAAA,EAAG;MACdnB,gBAAgB,CAACmB,aAAa,CAAC,IAAI,CAACX,aAAa,CAACY,EAAE,EAAE,IAAI,CAACZ,aAAa,EACrEI,IAAI,CAAC,MAAM;QACV,IAAI,CAACF,aAAa,CAAC,CAAC,EAAE;QACtB,IAAI,CAACH,QAAO,GAAI,KAAK;QACrB,IAAI,CAACC,aAAY,GAAI,IAAI;MAC3B,CAAC,EACAM,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAClE,CAAC,CAAC;IACN,CAAC;IAED;IACAM,aAAaA,CAACD,EAAE,EAAE;MAChBpB,gBAAgB,CAACqB,aAAa,CAACD,EAAE,EAC9BR,IAAI,CAAC,MAAM;QACV,IAAI,CAACF,aAAa,CAAC,CAAC,EAAE;MACxB,CAAC,EACAI,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAClE,CAAC,CAAC;IACN;EACF,CAAC;EACDO,OAAOA,CAAA,EAAG;IACR,IAAI,CAACZ,aAAa,CAAC,CAAC,EAAE;EACxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}