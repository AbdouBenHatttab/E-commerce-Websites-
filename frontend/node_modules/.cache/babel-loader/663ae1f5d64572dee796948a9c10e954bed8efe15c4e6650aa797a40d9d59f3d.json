{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport UserService from '@/services/serService';\nexport default {\n  name: 'AdminUsers',\n  data() {\n    return {\n      users: [],\n      selectedUser: null\n    };\n  },\n  async created() {\n    console.log('Stored token:', localStorage.getItem('token'));\n    console.log('Stored user:', localStorage.getItem('user'));\n    try {\n      const res = await UserService.getAllUsers();\n      this.users = res.data;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  },\n  methods: {\n    selectUser(user) {\n      this.selectedUser = {\n        ...user\n      };\n    },\n    async updateUser() {\n      try {\n        await UserService.updateUser(this.selectedUser.id, this.selectedUser);\n        // Refresh users list after update\n        const res = await UserService.getAllUsers();\n        this.users = res.data;\n        this.selectedUser = null;\n      } catch (error) {\n        console.error('Error updating user:', error);\n      }\n    },\n    async deleteUser(id) {\n      try {\n        await UserService.deleteUser(id);\n        this.users = this.users.filter(user => user.id !== id);\n      } catch (error) {\n        console.error('Error deleting user:', error);\n      }\n    },\n    cancelEdit() {\n      this.selectedUser = null;\n    },\n    goBack() {\n      this.$router.push({\n        name: 'AdminDashboard'\n      });\n    }\n  }\n};","map":{"version":3,"names":["UserService","name","data","users","selectedUser","created","console","log","localStorage","getItem","res","getAllUsers","error","methods","selectUser","user","updateUser","id","deleteUser","filter","cancelEdit","goBack","$router","push"],"sources":["C:\\Users\\Hedib\\OneDrive\\Bureau\\hello-word-vue\\src\\components\\admin\\AdminUsers.vue"],"sourcesContent":["<template>\n  <div class=\"container mt-5\">\n    <h2>Manage Users</h2>\n    <table class=\"table mt-3\" v-if=\"users.length\">\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Name</th>\n          <th>Email</th>\n          <th>Role</th>\n          <th>Status</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"user in users\" :key=\"user.id\">\n          <td>{{ user.id }}</td>\n          <td>{{ user.name }}</td>\n          <td>{{ user.email }}</td>\n          <td>{{ user.role }}</td>\n          <td>{{ user.status }}</td>\n          <td>\n            <button\n              class=\"btn btn-warning btn-sm me-1\"\n              @click=\"selectUser(user)\"\n            >\n              Edit\n            </button>\n            <button class=\"btn btn-danger btn-sm\" @click=\"deleteUser(user.id)\">\n              Delete\n            </button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <div v-else>\n      <p>No users found.</p>\n    </div>\n    <button class=\"btn btn-secondary mt-3\" @click=\"goBack\">Back</button>\n\n    <!-- Edit Form -->\n    <div v-if=\"selectedUser\" class=\"mt-4\">\n      <h3>Edit User</h3>\n      <form @submit.prevent=\"updateUser\">\n        <div class=\"mb-3\">\n          <label>Name:</label>\n          <input\n            type=\"text\"\n            v-model=\"selectedUser.name\"\n            class=\"form-control\"\n            required\n          />\n        </div>\n        <div class=\"mb-3\">\n          <label>Email:</label>\n          <input\n            type=\"email\"\n            v-model=\"selectedUser.email\"\n            class=\"form-control\"\n            required\n          />\n        </div>\n        <div class=\"mb-3\">\n          <label>Role:</label>\n          <select v-model=\"selectedUser.role\" class=\"form-select\">\n            <option value=\"ROLE_ADMIN\">Admin</option>\n            <option value=\"ROLE_USER\">User</option>\n          </select>\n        </div>\n        <div class=\"mb-3\">\n          <label>Status:</label>\n          <select v-model=\"selectedUser.status\" class=\"form-select\">\n            <option value=\"ACTIVE\">Active</option>\n            <option value=\"INACTIVE\">Inactive</option>\n          </select>\n        </div>\n        <div class=\"mb-3\">\n          <label>Phone Number:</label>\n          <input\n            type=\"text\"\n            v-model=\"selectedUser.phoneNumber\"\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"mb-3\">\n          <label>Address:</label>\n          <input\n            type=\"text\"\n            v-model=\"selectedUser.address\"\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"mb-3\">\n          <label>Image URL:</label>\n          <input\n            type=\"text\"\n            v-model=\"selectedUser.imageUrl\"\n            class=\"form-control\"\n            placeholder=\"Optional\"\n          />\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Update User</button>\n        <button\n          type=\"button\"\n          class=\"btn btn-secondary ms-2\"\n          @click=\"cancelEdit\"\n        >\n          Cancel\n        </button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport UserService from '@/services/serService';\n\nexport default {\n  name: 'AdminUsers',\n  data() {\n    return {\n      users: [],\n      selectedUser: null,\n    };\n  },\n  async created() {\n    console.log('Stored token:', localStorage.getItem('token'));\n    console.log('Stored user:', localStorage.getItem('user'));\n    try {\n      const res = await UserService.getAllUsers();\n      this.users = res.data;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  },\n  methods: {\n    selectUser(user) {\n      this.selectedUser = { ...user };\n    },\n    async updateUser() {\n      try {\n        await UserService.updateUser(this.selectedUser.id, this.selectedUser);\n        // Refresh users list after update\n        const res = await UserService.getAllUsers();\n        this.users = res.data;\n        this.selectedUser = null;\n      } catch (error) {\n        console.error('Error updating user:', error);\n      }\n    },\n    async deleteUser(id) {\n      try {\n        await UserService.deleteUser(id);\n        this.users = this.users.filter((user) => user.id !== id);\n      } catch (error) {\n        console.error('Error deleting user:', error);\n      }\n    },\n    cancelEdit() {\n      this.selectedUser = null;\n    },\n    goBack() {\n      this.$router.push({ name: 'AdminDashboard' });\n    },\n  },\n};\n</script>\n\n<style scoped>\ntable {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";;;AAmHA,OAAOA,WAAU,MAAO,uBAAuB;AAE/C,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACdC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC3DH,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IACzD,IAAI;MACF,MAAMC,GAAE,GAAI,MAAMV,WAAW,CAACW,WAAW,CAAC,CAAC;MAC3C,IAAI,CAACR,KAAI,GAAIO,GAAG,CAACR,IAAI;IACvB,EAAE,OAAOU,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAACC,IAAI,EAAE;MACf,IAAI,CAACX,YAAW,GAAI;QAAE,GAAGW;MAAK,CAAC;IACjC,CAAC;IACD,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAMhB,WAAW,CAACgB,UAAU,CAAC,IAAI,CAACZ,YAAY,CAACa,EAAE,EAAE,IAAI,CAACb,YAAY,CAAC;QACrE;QACA,MAAMM,GAAE,GAAI,MAAMV,WAAW,CAACW,WAAW,CAAC,CAAC;QAC3C,IAAI,CAACR,KAAI,GAAIO,GAAG,CAACR,IAAI;QACrB,IAAI,CAACE,YAAW,GAAI,IAAI;MAC1B,EAAE,OAAOQ,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACD,MAAMM,UAAUA,CAACD,EAAE,EAAE;MACnB,IAAI;QACF,MAAMjB,WAAW,CAACkB,UAAU,CAACD,EAAE,CAAC;QAChC,IAAI,CAACd,KAAI,GAAI,IAAI,CAACA,KAAK,CAACgB,MAAM,CAAEJ,IAAI,IAAKA,IAAI,CAACE,EAAC,KAAMA,EAAE,CAAC;MAC1D,EAAE,OAAOL,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACDQ,UAAUA,CAAA,EAAG;MACX,IAAI,CAAChB,YAAW,GAAI,IAAI;IAC1B,CAAC;IACDiB,MAAMA,CAAA,EAAG;MACP,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAAEtB,IAAI,EAAE;MAAiB,CAAC,CAAC;IAC/C;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}