{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport ContactService from '@/services/ContactService';\nexport default {\n  name: 'ContactMessages',\n  data() {\n    return {\n      messages: [],\n      editingMessage: null\n    };\n  },\n  computed: {\n    isAdmin() {\n      return this.$store.state.user?.role === 'ROLE_ADMIN'; // Check if the user is an admin\n    }\n  },\n  async created() {\n    try {\n      this.messages = await ContactService.getAllMessages();\n    } catch (error) {\n      console.error('Error fetching contact messages:', error);\n    }\n  },\n  methods: {\n    async deleteMessage(id) {\n      try {\n        await ContactService.deleteMessage(id);\n        this.messages = this.messages.filter(message => message.id !== id);\n      } catch (error) {\n        console.error('Error deleting message:', error);\n      }\n    },\n    editMessage(message) {\n      this.editingMessage = {\n        ...message\n      }; // Create a copy of the message to edit\n    },\n    async saveMessage() {\n      try {\n        await ContactService.updateMessage(this.editingMessage.id, this.editingMessage);\n        const index = this.messages.findIndex(msg => msg.id === this.editingMessage.id);\n        if (index !== -1) {\n          this.messages[index] = this.editingMessage;\n        }\n        this.editingMessage = null;\n      } catch (error) {\n        console.error('Error updating message:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ContactService","name","data","messages","editingMessage","computed","isAdmin","$store","state","user","role","created","getAllMessages","error","console","methods","deleteMessage","id","filter","message","editMessage","saveMessage","updateMessage","index","findIndex","msg"],"sources":["C:\\Users\\Hedib\\OneDrive\\Bureau\\hello-word-vue\\src\\components\\admin\\ContactMessages.vue"],"sourcesContent":["<template>\r\n  <div class=\"contact-messages-container\">\r\n    <h2 class=\"text-center mb-4\">Contact Us Messages</h2>\r\n    <div v-if=\"messages.length === 0\" class=\"alert alert-info\">\r\n      No messages available.\r\n    </div>\r\n\r\n    <!-- Messages List -->\r\n    <div v-else>\r\n      <div v-for=\"message in messages\" :key=\"message.id\" class=\"card mb-3\">\r\n        <div class=\"card-body\">\r\n          <h5 class=\"card-title\">{{ message.name }}</h5>\r\n          <h6 class=\"card-subtitle mb-2 text-muted\">{{ message.email }}</h6>\r\n          <p class=\"card-text\">{{ message.message }}</p>\r\n\r\n          <!-- Edit and Delete Buttons for Admin -->\r\n          <button \r\n            v-if=\"isAdmin\" \r\n            @click=\"editMessage(message)\" \r\n            class=\"btn btn-warning btn-sm me-2\"\r\n          >\r\n            Edit\r\n          </button>\r\n          <button \r\n            v-if=\"isAdmin\" \r\n            @click=\"deleteMessage(message.id)\" \r\n            class=\"btn btn-danger btn-sm\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Edit Message Modal -->\r\n    <div v-if=\"editingMessage\" class=\"modal fade show\" tabindex=\"-1\" aria-labelledby=\"editModalLabel\" style=\"display: block;\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\" id=\"editModalLabel\">Edit Message</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" @click=\"editingMessage = null\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <div class=\"form-floating mb-4\">\r\n              <input type=\"text\" class=\"form-control\" id=\"name\" v-model=\"editingMessage.name\" />\r\n              <label for=\"name\">Name</label>\r\n            </div>\r\n            <div class=\"form-floating mb-4\">\r\n              <input type=\"email\" class=\"form-control\" id=\"email\" v-model=\"editingMessage.email\" />\r\n              <label for=\"email\">Email</label>\r\n            </div>\r\n            <div class=\"form-floating mb-4\">\r\n              <textarea class=\"form-control\" id=\"message\" v-model=\"editingMessage.message\" rows=\"3\"></textarea>\r\n              <label for=\"message\">Message</label>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"editingMessage = null\">Close</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"saveMessage\">Save changes</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ContactService from '@/services/ContactService';\r\n\r\nexport default {\r\n  name: 'ContactMessages',\r\n  data() {\r\n    return {\r\n      messages: [],\r\n      editingMessage: null,\r\n    };\r\n  },\r\n  computed: {\r\n    isAdmin() {\r\n      return this.$store.state.user?.role === 'ROLE_ADMIN'; // Check if the user is an admin\r\n    }\r\n  },\r\n  async created() {\r\n    try {\r\n      this.messages = await ContactService.getAllMessages();\r\n    } catch (error) {\r\n      console.error('Error fetching contact messages:', error);\r\n    }\r\n  },\r\n  methods: {\r\n    async deleteMessage(id) {\r\n      try {\r\n        await ContactService.deleteMessage(id);\r\n        this.messages = this.messages.filter((message) => message.id !== id);\r\n      } catch (error) {\r\n        console.error('Error deleting message:', error);\r\n      }\r\n    },\r\n    editMessage(message) {\r\n      this.editingMessage = { ...message }; // Create a copy of the message to edit\r\n    },\r\n    async saveMessage() {\r\n      try {\r\n        await ContactService.updateMessage(this.editingMessage.id, this.editingMessage);\r\n        const index = this.messages.findIndex((msg) => msg.id === this.editingMessage.id);\r\n        if (index !== -1) {\r\n          this.messages[index] = this.editingMessage;\r\n        }\r\n        this.editingMessage = null;\r\n      } catch (error) {\r\n        console.error('Error updating message:', error);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add styles for the CRUD operations */\r\n</style>\r\n"],"mappings":";;AAmEA,OAAOA,cAAa,MAAO,2BAA2B;AAEtD,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,IAAI,EAAEC,IAAG,KAAM,YAAY,EAAE;IACxD;EACF,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI;MACF,IAAI,CAACR,QAAO,GAAI,MAAMH,cAAc,CAACY,cAAc,CAAC,CAAC;IACvD,EAAE,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EACDE,OAAO,EAAE;IACP,MAAMC,aAAaA,CAACC,EAAE,EAAE;MACtB,IAAI;QACF,MAAMjB,cAAc,CAACgB,aAAa,CAACC,EAAE,CAAC;QACtC,IAAI,CAACd,QAAO,GAAI,IAAI,CAACA,QAAQ,CAACe,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACF,EAAC,KAAMA,EAAE,CAAC;MACtE,EAAE,OAAOJ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IACDO,WAAWA,CAACD,OAAO,EAAE;MACnB,IAAI,CAACf,cAAa,GAAI;QAAE,GAAGe;MAAQ,CAAC,EAAE;IACxC,CAAC;IACD,MAAME,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMrB,cAAc,CAACsB,aAAa,CAAC,IAAI,CAAClB,cAAc,CAACa,EAAE,EAAE,IAAI,CAACb,cAAc,CAAC;QAC/E,MAAMmB,KAAI,GAAI,IAAI,CAACpB,QAAQ,CAACqB,SAAS,CAAEC,GAAG,IAAKA,GAAG,CAACR,EAAC,KAAM,IAAI,CAACb,cAAc,CAACa,EAAE,CAAC;QACjF,IAAIM,KAAI,KAAM,CAAC,CAAC,EAAE;UAChB,IAAI,CAACpB,QAAQ,CAACoB,KAAK,IAAI,IAAI,CAACnB,cAAc;QAC5C;QACA,IAAI,CAACA,cAAa,GAAI,IAAI;MAC5B,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}