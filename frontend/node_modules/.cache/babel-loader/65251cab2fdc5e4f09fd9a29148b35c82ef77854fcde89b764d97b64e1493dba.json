{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport ContactService from '@/services/ContactService';\nexport default {\n  name: 'ContactMessages',\n  data() {\n    return {\n      messages: [] // Store the messages fetched from the backend\n    };\n  },\n  computed: {\n    // Check if the user is an admin (can be modified for your authentication mechanism)\n    isAdmin() {\n      const role = localStorage.getItem('role');\n      console.log('Current Role:', role); // Log the role to check its value\n      return role === 'ROLE_ADMIN';\n    }\n  },\n  async created() {\n    try {\n      // Fetch messages from the backend API\n      this.messages = await ContactService.getAllMessages();\n    } catch (error) {\n      console.error('Error fetching contact messages:', error);\n    }\n  },\n  methods: {\n    // Format the timestamp to a readable format\n    formatTimestamp(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleString('en-US', {\n        weekday: 'short',\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: 'numeric'\n      });\n    },\n    // Method to delete the message\n    async deleteMessage(id) {\n      try {\n        await ContactService.deleteMessage(id);\n        this.messages = this.messages.filter(message => message.id !== id);\n      } catch (error) {\n        console.error('Error deleting message:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ContactService","name","data","messages","computed","isAdmin","role","localStorage","getItem","console","log","created","getAllMessages","error","methods","formatTimestamp","timestamp","date","Date","toLocaleString","weekday","year","month","day","hour","minute","deleteMessage","id","filter","message"],"sources":["C:\\Users\\Hedib\\OneDrive\\Bureau\\hello-word-vue\\src\\components\\admin\\ContactMessages.vue"],"sourcesContent":["<template>\n  <div class=\"contact-messages-container\">\n    <h2 class=\"text-center mb-4\">Contact Us Messages</h2>\n\n    <!-- No messages available -->\n    <div v-if=\"messages.length === 0\" class=\"alert alert-info\">\n      No messages available.\n    </div>\n\n    <!-- Messages List -->\n    <div v-else>\n      <div v-for=\"message in messages\" :key=\"message.id\" class=\"card mb-4 shadow-lg hover-card\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title font-weight-bold text-dark\">{{ message.name }}</h5>\n          <h6 class=\"card-subtitle mb-3 text-muted\">{{ message.email }}</h6>\n          <p class=\"card-text\">{{ message.message }}</p>\n\n          <!-- Display formatted timestamp -->\n          <div class=\"timestamp\">\n            <small class=\"text-muted\">\n              Sent on: {{ formatTimestamp(message.timestamp) }}\n            </small>\n          </div>\n\n          <!-- Admin Delete Button (only visible to admins) -->\n          <div v-if=\"isAdmin\" class=\"d-flex justify-content-end\">\n            <button\n              @click=\"deleteMessage(message.id)\"\n              class=\"btn btn-danger btn-sm shadow-lg delete-btn\"\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ContactService from '@/services/ContactService';\n\nexport default {\n  name: 'ContactMessages',\n  data() {\n    return {\n      messages: [], // Store the messages fetched from the backend\n    };\n  },\n  computed: {\n    // Check if the user is an admin (can be modified for your authentication mechanism)\n    isAdmin() {\n      const role = localStorage.getItem('role');\n      console.log('Current Role:', role); // Log the role to check its value\n      return role === 'ROLE_ADMIN';\n    },\n  },\n  async created() {\n    try {\n      // Fetch messages from the backend API\n      this.messages = await ContactService.getAllMessages();\n    } catch (error) {\n      console.error('Error fetching contact messages:', error);\n    }\n  },\n  methods: {\n    // Format the timestamp to a readable format\n    formatTimestamp(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleString('en-US', { \n        weekday: 'short', \n        year: 'numeric', \n        month: 'short', \n        day: 'numeric', \n        hour: 'numeric', \n        minute: 'numeric' \n      });\n    },\n    \n    // Method to delete the message\n    async deleteMessage(id) {\n      try {\n        await ContactService.deleteMessage(id);\n        this.messages = this.messages.filter((message) => message.id !== id);\n      } catch (error) {\n        console.error('Error deleting message:', error);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":";;AAwCA,OAAOA,cAAa,MAAO,2BAA2B;AAEtD,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE,CAAE;IAChB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,OAAOA,CAAA,EAAG;MACR,MAAMC,IAAG,GAAIC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MACzCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEJ,IAAI,CAAC,EAAE;MACpC,OAAOA,IAAG,KAAM,YAAY;IAC9B;EACF,CAAC;EACD,MAAMK,OAAOA,CAAA,EAAG;IACd,IAAI;MACF;MACA,IAAI,CAACR,QAAO,GAAI,MAAMH,cAAc,CAACY,cAAc,CAAC,CAAC;IACvD,EAAE,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,eAAeA,CAACC,SAAS,EAAE;MACzB,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,SAAS,CAAC;MAChC,OAAOC,IAAI,CAACE,cAAc,CAAC,OAAO,EAAE;QAClCC,OAAO,EAAE,OAAO;QAChBC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,OAAO;QACdC,GAAG,EAAE,SAAS;QACdC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC;IAED;IACA,MAAMC,aAAaA,CAACC,EAAE,EAAE;MACtB,IAAI;QACF,MAAM3B,cAAc,CAAC0B,aAAa,CAACC,EAAE,CAAC;QACtC,IAAI,CAACxB,QAAO,GAAI,IAAI,CAACA,QAAQ,CAACyB,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACF,EAAC,KAAMA,EAAE,CAAC;MACtE,EAAE,OAAOd,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}