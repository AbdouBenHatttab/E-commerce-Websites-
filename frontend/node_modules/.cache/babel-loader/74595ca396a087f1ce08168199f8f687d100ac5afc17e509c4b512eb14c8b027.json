{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AuthService from '@/services/AuthService';\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      email: '',\n      password: '',\n      error: '',\n      success: ''\n    };\n  },\n  methods: {\n    async login() {\n      try {\n        // Send login credentials\n        const response = await AuthService.login({\n          email: this.email,\n          password: this.password\n        });\n        console.log('Login response:', response);\n\n        // Store the full user object from response.user\n        if (response.user && response.user.role === 'ROLE_ADMIN') {\n          this.success = 'Login successful! Redirecting to Admin Dashboard...';\n          console.log('Redirecting to Admin Dashboard...');\n          this.$router.replace({\n            name: 'AdminDashboard'\n          });\n        } else if (response.user && response.user.role === 'ROLE_USER') {\n          this.success = 'Login successful! Redirecting to User Dashboard...';\n          console.log('Redirecting to User Dashboard...');\n          this.$router.push({\n            name: 'AdminDashboard'\n          });\n        } else {\n          // If role is unexpected\n          this.error = 'Unexpected user role. Please contact support.';\n        }\n      } catch (err) {\n        this.error = 'Invalid credentials. Please try again.';\n        this.success = '';\n        console.error('Login failed:', err);\n        x;\n      }\n    }\n  }\n};","map":{"version":3,"names":["AuthService","name","data","email","password","error","success","methods","login","response","console","log","user","role","$router","replace","push","err","x"],"sources":["C:\\Users\\Hedib\\OneDrive\\Bureau\\hello-word-vue\\src\\components\\LoginPage.vue"],"sourcesContent":["<template>\n  <div class=\"login\">\n    <form @submit.prevent=\"login\">\n      <div class=\"mb-3\">\n        <label>Email:</label>\n        <input\n          type=\"email\"\n          class=\"form-control\"\n          v-model=\"email\"\n          required\n          autocomplete=\"email\"\n        />\n      </div>\n      <div class=\"mb-3\">\n        <label>Password:</label>\n        <input\n          type=\"password\"\n          class=\"form-control\"\n          v-model=\"password\"\n          required\n          autocomplete=\"current-password\"\n        />\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary w-100\">Login</button>\n      <p class=\"mt-3 text-center\">\n        Don't have an account?\n        <router-link to=\"/register\">Register here</router-link>\n      </p>\n    </form>\n    <div v-if=\"error\" class=\"alert alert-danger mt-3\">{{ error }}</div>\n    <div v-if=\"success\" class=\"alert alert-success mt-3\">{{ success }}</div>\n  </div>\n</template>\n\n<script>\nimport AuthService from '@/services/AuthService';\n\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      email: '',\n      password: '',\n      error: '',\n      success: '',\n    };\n  },\n  methods: {\n    async login() {\n      try {\n        // Send login credentials\n        const response = await AuthService.login({\n          email: this.email,\n          password: this.password,\n        });\n        console.log('Login response:', response);\n\n        // Store the full user object from response.user\n        if (response.user && response.user.role === 'ROLE_ADMIN') {\n          this.success = 'Login successful! Redirecting to Admin Dashboard...';\n          console.log('Redirecting to Admin Dashboard...');\n          this.$router.replace({ name: 'AdminDashboard' });\n        } else if (response.user && response.user.role === 'ROLE_USER') {\n          this.success = 'Login successful! Redirecting to User Dashboard...';\n          console.log('Redirecting to User Dashboard...');\n          this.$router.push({ name: 'AdminDashboard' });\n        } else {\n          // If role is unexpected\n          this.error = 'Unexpected user role. Please contact support.';\n        }\n      } catch (err) {\n        this.error = 'Invalid credentials. Please try again.';\n        this.success = '';\n        console.error('Login failed:', err);\n        x;\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":";AAmCA,OAAOA,WAAU,MAAO,wBAAwB;AAEhD,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAA,EAAG;MACZ,IAAI;QACF;QACA,MAAMC,QAAO,GAAI,MAAMT,WAAW,CAACQ,KAAK,CAAC;UACvCL,KAAK,EAAE,IAAI,CAACA,KAAK;UACjBC,QAAQ,EAAE,IAAI,CAACA;QACjB,CAAC,CAAC;QACFM,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,QAAQ,CAAC;;QAExC;QACA,IAAIA,QAAQ,CAACG,IAAG,IAAKH,QAAQ,CAACG,IAAI,CAACC,IAAG,KAAM,YAAY,EAAE;UACxD,IAAI,CAACP,OAAM,GAAI,qDAAqD;UACpEI,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;UAChD,IAAI,CAACG,OAAO,CAACC,OAAO,CAAC;YAAEd,IAAI,EAAE;UAAiB,CAAC,CAAC;QAClD,OAAO,IAAIQ,QAAQ,CAACG,IAAG,IAAKH,QAAQ,CAACG,IAAI,CAACC,IAAG,KAAM,WAAW,EAAE;UAC9D,IAAI,CAACP,OAAM,GAAI,oDAAoD;UACnEI,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;UAC/C,IAAI,CAACG,OAAO,CAACE,IAAI,CAAC;YAAEf,IAAI,EAAE;UAAiB,CAAC,CAAC;QAC/C,OAAO;UACL;UACA,IAAI,CAACI,KAAI,GAAI,+CAA+C;QAC9D;MACF,EAAE,OAAOY,GAAG,EAAE;QACZ,IAAI,CAACZ,KAAI,GAAI,wCAAwC;QACrD,IAAI,CAACC,OAAM,GAAI,EAAE;QACjBI,OAAO,CAACL,KAAK,CAAC,eAAe,EAAEY,GAAG,CAAC;QACnCC,CAAC;MACH;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}